{"/home/travis/build/npmtest/node-npmtest-angular2-datatable/test.js":"/* istanbul instrument in package npmtest_angular2_datatable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-datatable/lib.npmtest_angular2_datatable.js":"/* istanbul instrument in package npmtest_angular2_datatable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_datatable = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_datatable = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-datatable/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-datatable && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_datatable */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_datatable\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_datatable.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_angular2_datatable.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_datatable.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_angular2_datatable.__dirname + '/lib.npmtest_angular2_datatable.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/index.js":"var dataTable_directive = require('./lib/DataTable');\nvar defaultSorter_directive = require('./lib/DefaultSorter');\nvar paginator_component = require('./lib/Paginator');\nvar bootstrapPaginator_component = require('./lib/BootstrapPaginator');\nvar dataTable_module = require('./lib/DataTableModule');\n\nexports.DataTable = dataTable_directive.DataTable;\nexports.DataEvent = dataTable_directive.DataEvent;\nexports.PageEvent = dataTable_directive.PageEvent;\nexports.SortEvent = dataTable_directive.SortEvent;\nexports.DefaultSorter = defaultSorter_directive.DefaultSorter;\nexports.Paginator = paginator_component.Paginator;\nexports.BootstrapPaginator = bootstrapPaginator_component.BootstrapPaginator;\nexports.DataTableModule = dataTable_module.DataTableModule;\n","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/lib/DataTable.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require(\"@angular/core\");\nvar _ = require(\"lodash\");\nvar Rx_1 = require(\"rxjs/Rx\");\nvar DataTable = (function () {\n    function DataTable(differs) {\n        this.differs = differs;\n        this.inputData = [];\n        this.sortBy = \"\";\n        this.sortOrder = \"asc\";\n        this.sortByChange = new core_1.EventEmitter();\n        this.sortOrderChange = new core_1.EventEmitter();\n        this.rowsOnPage = 1000;\n        this.activePage = 1;\n        this.mustRecalculateData = false;\n        this.onSortChange = new Rx_1.ReplaySubject(1);\n        this.onPageChange = new core_1.EventEmitter();\n        this.diff = differs.find([]).create(null);\n    }\n    DataTable.prototype.getSort = function () {\n        return { sortBy: this.sortBy, sortOrder: this.sortOrder };\n    };\n    DataTable.prototype.setSort = function (sortBy, sortOrder) {\n        if (this.sortBy !== sortBy || this.sortOrder !== sortOrder) {\n            this.sortBy = sortBy;\n            this.sortOrder = _.includes([\"asc\", \"desc\"], sortOrder) ? sortOrder : \"asc\";\n            this.mustRecalculateData = true;\n            this.onSortChange.next({ sortBy: sortBy, sortOrder: sortOrder });\n            this.sortByChange.emit(this.sortBy);\n            this.sortOrderChange.emit(this.sortOrder);\n        }\n    };\n    DataTable.prototype.getPage = function () {\n        return { activePage: this.activePage, rowsOnPage: this.rowsOnPage, dataLength: this.inputData.length };\n    };\n    DataTable.prototype.setPage = function (activePage, rowsOnPage) {\n        if (this.rowsOnPage !== rowsOnPage || this.activePage !== activePage) {\n            this.activePage = this.activePage !== activePage ? activePage : this.calculateNewActivePage(this.rowsOnPage, rowsOnPage);\n            this.rowsOnPage = rowsOnPage;\n            this.mustRecalculateData = true;\n            this.onPageChange.emit({\n                activePage: this.activePage,\n                rowsOnPage: this.rowsOnPage,\n                dataLength: this.inputData ? this.inputData.length : 0\n            });\n        }\n    };\n    DataTable.prototype.calculateNewActivePage = function (previousRowsOnPage, currentRowsOnPage) {\n        var firstRowOnPage = (this.activePage - 1) * previousRowsOnPage + 1;\n        var newActivePage = Math.ceil(firstRowOnPage / currentRowsOnPage);\n        return newActivePage;\n    };\n    DataTable.prototype.recalculatePage = function () {\n        var lastPage = Math.ceil(this.inputData.length / this.rowsOnPage);\n        this.activePage = lastPage < this.activePage ? lastPage : this.activePage;\n        this.activePage = this.activePage || 1;\n        this.onPageChange.emit({\n            activePage: this.activePage,\n            rowsOnPage: this.rowsOnPage,\n            dataLength: this.inputData.length\n        });\n    };\n    DataTable.prototype.ngOnChanges = function (changes) {\n        if (changes[\"rowsOnPage\"]) {\n            this.rowsOnPage = changes[\"rowsOnPage\"].previousValue;\n            this.setPage(this.activePage, changes[\"rowsOnPage\"].currentValue);\n            this.mustRecalculateData = true;\n        }\n        if (changes[\"sortBy\"] || changes[\"sortOrder\"]) {\n            if (!_.includes([\"asc\", \"desc\"], this.sortOrder)) {\n                console.warn(\"angular2-datatable: value for input mfSortOrder must be one of ['asc', 'desc'], but is:\", this.sortOrder);\n                this.sortOrder = \"asc\";\n            }\n            if (this.sortBy) {\n                this.onSortChange.next({ sortBy: this.sortBy, sortOrder: this.sortOrder });\n            }\n            this.mustRecalculateData = true;\n        }\n        if (changes[\"inputData\"]) {\n            this.inputData = changes[\"inputData\"].currentValue || [];\n            this.recalculatePage();\n            this.mustRecalculateData = true;\n        }\n    };\n    DataTable.prototype.ngDoCheck = function () {\n        var changes = this.diff.diff(this.inputData);\n        if (changes) {\n            this.recalculatePage();\n            this.mustRecalculateData = true;\n        }\n        if (this.mustRecalculateData) {\n            this.fillData();\n            this.mustRecalculateData = false;\n        }\n    };\n    DataTable.prototype.fillData = function () {\n        this.activePage = this.activePage;\n        this.rowsOnPage = this.rowsOnPage;\n        var offset = (this.activePage - 1) * this.rowsOnPage;\n        var data = this.inputData;\n        var sortBy = this.sortBy;\n        if (typeof sortBy === 'string' || sortBy instanceof String) {\n            data = _.orderBy(data, this.caseInsensitiveIteratee(sortBy), [this.sortOrder]);\n        }\n        else {\n            data = _.orderBy(data, sortBy, [this.sortOrder]);\n        }\n        data = _.slice(data, offset, offset + this.rowsOnPage);\n        this.data = data;\n    };\n    DataTable.prototype.caseInsensitiveIteratee = function (sortBy) {\n        return function (row) {\n            var value = row;\n            for (var _i = 0, _a = sortBy.split('.'); _i < _a.length; _i++) {\n                var sortByProperty = _a[_i];\n                if (value) {\n                    value = value[sortByProperty];\n                }\n            }\n            if (value && typeof value === 'string' || value instanceof String) {\n                return value.toLowerCase();\n            }\n            return value;\n        };\n    };\n    return DataTable;\n}());\n__decorate([\n    core_1.Input(\"mfData\"),\n    __metadata(\"design:type\", Array)\n], DataTable.prototype, \"inputData\", void 0);\n__decorate([\n    core_1.Input(\"mfSortBy\"),\n    __metadata(\"design:type\", Object)\n], DataTable.prototype, \"sortBy\", void 0);\n__decorate([\n    core_1.Input(\"mfSortOrder\"),\n    __metadata(\"design:type\", Object)\n], DataTable.prototype, \"sortOrder\", void 0);\n__decorate([\n    core_1.Output(\"mfSortByChange\"),\n    __metadata(\"design:type\", Object)\n], DataTable.prototype, \"sortByChange\", void 0);\n__decorate([\n    core_1.Output(\"mfSortOrderChange\"),\n    __metadata(\"design:type\", Object)\n], DataTable.prototype, \"sortOrderChange\", void 0);\n__decorate([\n    core_1.Input(\"mfRowsOnPage\"),\n    __metadata(\"design:type\", Object)\n], DataTable.prototype, \"rowsOnPage\", void 0);\n__decorate([\n    core_1.Input(\"mfActivePage\"),\n    __metadata(\"design:type\", Object)\n], DataTable.prototype, \"activePage\", void 0);\nDataTable = __decorate([\n    core_1.Directive({\n        selector: 'table[mfData]',\n        exportAs: 'mfDataTable'\n    }),\n    __metadata(\"design:paramtypes\", [core_1.IterableDiffers])\n], DataTable);\nexports.DataTable = DataTable;\n//# sourceMappingURL=DataTable.js.map","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/lib/BootstrapPaginator.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require(\"@angular/core\");\nvar DataTable_1 = require(\"./DataTable\");\nvar _ = require(\"lodash\");\nvar BootstrapPaginator = (function () {\n    function BootstrapPaginator() {\n        this.rowsOnPageSet = [];\n        this.minRowsOnPage = 0;\n    }\n    BootstrapPaginator.prototype.ngOnChanges = function (changes) {\n        if (changes.rowsOnPageSet) {\n            this.minRowsOnPage = _.min(this.rowsOnPageSet);\n        }\n    };\n    return BootstrapPaginator;\n}());\n__decorate([\n    core_1.Input(\"rowsOnPageSet\"),\n    __metadata(\"design:type\", Object)\n], BootstrapPaginator.prototype, \"rowsOnPageSet\", void 0);\n__decorate([\n    core_1.Input(\"mfTable\"),\n    __metadata(\"design:type\", DataTable_1.DataTable)\n], BootstrapPaginator.prototype, \"mfTable\", void 0);\nBootstrapPaginator = __decorate([\n    core_1.Component({\n        selector: \"mfBootstrapPaginator\",\n        template: \"\\n    <mfPaginator #p [mfTable]=\\\"mfTable\\\">\\n        <ul class=\\\"pagination\\\" *ngIf=\\\"p.dataLength > p.rowsOnPage\\\">\\n            <li class=\\\"page-item\\\" [class.disabled]=\\\"p.activePage <= 1\\\" (click)=\\\"p.setPage(1)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">&laquo;</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage > 4 && p.activePage + 1 > p.lastPage\\\" (click)=\\\"p.setPage(p.activePage - 4)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage-4}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage > 3 && p.activePage + 2 > p.lastPage\\\" (click)=\\\"p.setPage(p.activePage - 3)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage-3}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage > 2\\\" (click)=\\\"p.setPage(p.activePage - 2)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage-2}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage > 1\\\" (click)=\\\"p.setPage(p.activePage - 1)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage-1}}</a>\\n            </li>\\n            <li class=\\\"page-item active\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage + 1 <= p.lastPage\\\" (click)=\\\"p.setPage(p.activePage + 1)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage+1}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage + 2 <= p.lastPage\\\" (click)=\\\"p.setPage(p.activePage + 2)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage+2}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage + 3 <= p.lastPage && p.activePage < 3\\\" (click)=\\\"p.setPage(p.activePage + 3)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage+3}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" *ngIf=\\\"p.activePage + 4 <= p.lastPage && p.activePage < 2\\\" (click)=\\\"p.setPage(p.activePage + 4)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{p.activePage+4}}</a>\\n            </li>\\n            <li class=\\\"page-item\\\" [class.disabled]=\\\"p.activePage >= p.lastPage\\\" (click)=\\\"p.setPage(p.lastPage)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">&raquo;</a>\\n            </li>\\n        </ul>\\n        <ul class=\\\"pagination pull-right float-sm-right\\\" *ngIf=\\\"p.dataLength > minRowsOnPage\\\">\\n            <li class=\\\"page-item\\\" *ngFor=\\\"let rows of rowsOnPageSet\\\" [class.active]=\\\"p.rowsOnPage===rows\\\" (click)=\\\"p.setRowsOnPage(rows)\\\">\\n                <a class=\\\"page-link\\\" style=\\\"cursor: pointer\\\">{{rows}}</a>\\n            </li>\\n        </ul>\\n    </mfPaginator>\\n    \"\n    })\n], BootstrapPaginator);\nexports.BootstrapPaginator = BootstrapPaginator;\n//# sourceMappingURL=BootstrapPaginator.js.map","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/lib/DataTable.spec.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar core_1 = require(\"@angular/core\");\nvar DataTable_1 = require(\"./DataTable\");\nvar testing_1 = require(\"@angular/core/testing\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nvar _ = require(\"lodash\");\nvar TestComponent = (function () {\n    function TestComponent() {\n    }\n    return TestComponent;\n}());\nTestComponent = __decorate([\n    core_1.Component({\n        template: \"<table [mfData]=\\\"[]\\\"></table>\"\n    })\n], TestComponent);\ndescribe(\"DataTable directive tests\", function () {\n    var datatable;\n    var fixture;\n    beforeEach(function () {\n        testing_1.TestBed.configureTestingModule({\n            declarations: [DataTable_1.DataTable, TestComponent]\n        });\n        fixture = testing_1.TestBed.createComponent(TestComponent);\n        datatable = fixture.debugElement.query(platform_browser_1.By.directive(DataTable_1.DataTable)).injector.get(DataTable_1.DataTable);\n        datatable.inputData = [\n            { id: 3, name: 'banana' },\n            { id: 1, name: 'Duck' },\n            { id: 2, name: 'ącki' },\n            { id: 5, name: 'Ðrone' },\n            { id: 4, name: 'Ananas' }\n        ];\n        datatable.ngOnChanges({ inputData: new core_1.SimpleChange(null, datatable.inputData) });\n    });\n    describe(\"initializing\", function () {\n        it(\"data should be empty array if inputData is undefined or null\", function () {\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(null, null) });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([]);\n        });\n        it(\"data should be equal to inputData\", function () {\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(datatable.inputData);\n        });\n        it(\"data should be 2 first items\", function () {\n            datatable.rowsOnPage = 2;\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 3, name: 'banana' }, { id: 1, name: 'Duck' }]);\n        });\n        it(\"data should be 3. and 4. items\", function () {\n            datatable.rowsOnPage = 2;\n            datatable.activePage = 2;\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 2, name: 'ącki' }, { id: 5, name: 'Ðrone' }]);\n        });\n        it(\"shouldn't recalculate data when no changes\", function () {\n            datatable.ngDoCheck();\n            var data = datatable.data;\n            datatable.ngOnChanges({});\n            datatable.ngDoCheck();\n            expect(datatable.data).toBe(data);\n        });\n    });\n    describe(\"pagination\", function () {\n        beforeEach(function () {\n            datatable.rowsOnPage = 2;\n            datatable.ngDoCheck();\n        });\n        it(\"should return current page settings\", function () {\n            expect(datatable.getPage()).toEqual({ activePage: 1, rowsOnPage: 2, dataLength: 5 });\n        });\n        it(\"data should be 3. and 4. items when page change\", function () {\n            datatable.setPage(2, 2);\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 2, name: 'ącki' }, { id: 5, name: 'Ðrone' }]);\n        });\n        it(\"data should be three first items when page change\", function () {\n            datatable.setPage(1, 3);\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 3, name: 'banana' }, { id: 1, name: 'Duck' }, { id: 2, name: 'ącki' }]);\n        });\n        it(\"data should be two last items when page change\", function () {\n            datatable.setPage(2, 3);\n            datatable.setPage(2, 3);\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 5, name: 'Ðrone' }, { id: 4, name: 'Ananas' }]);\n        });\n        it(\"should change rowsOnPage when mfRowsOnPage changed\", function (done) {\n            datatable.rowsOnPage = 2;\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 3, name: 'banana' }, { id: 1, name: 'Duck' }]);\n            datatable.onPageChange.subscribe(function (pageOptions) {\n                expect(pageOptions.rowsOnPage).toEqual(3);\n                done();\n            });\n            datatable.rowsOnPage = 3;\n            datatable.ngOnChanges({ rowsOnPage: new core_1.SimpleChange(2, 3) });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 3, name: 'banana' }, { id: 1, name: 'Duck' }, { id: 2, name: 'ącki' }]);\n        });\n    });\n    describe(\"sorting\", function () {\n        it(\"id should return current sort setting\", function () {\n            datatable.setSort(\"id\", \"desc\");\n            expect(datatable.getSort()).toEqual({ sortBy: \"id\", sortOrder: \"desc\" });\n        });\n        it(\"should sort data after sorting input value changed\", function () {\n            datatable.ngDoCheck();\n            datatable.sortBy = \"id\";\n            datatable.sortOrder = \"asc\";\n            datatable.ngOnChanges({\n                sortBy: new core_1.SimpleChange(null, datatable.sortBy),\n                sortOrder: new core_1.SimpleChange(null, datatable.sortOrder)\n            });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([\n                { id: 1, name: 'Duck' },\n                { id: 2, name: 'ącki' },\n                { id: 3, name: 'banana' },\n                { id: 4, name: 'Ananas' },\n                { id: 5, name: 'Ðrone' }\n            ]);\n        });\n        it(\"should fire onSortChange event after sorting input value changed\", function (done) {\n            datatable.onSortChange.subscribe(function (event) {\n                expect(event.sortBy).toEqual(\"id\");\n                expect(event.sortOrder).toEqual(\"desc\");\n                done();\n            });\n            datatable.ngDoCheck();\n            datatable.sortBy = \"id\";\n            datatable.sortOrder = \"desc\";\n            datatable.ngOnChanges({\n                sortBy: new core_1.SimpleChange(null, datatable.sortBy),\n                sortOrder: new core_1.SimpleChange(null, datatable.sortOrder)\n            });\n            datatable.ngDoCheck();\n        });\n        it(\"should set sortOrder to 'asc' if not provided\", function (done) {\n            datatable.onSortChange.subscribe(function (event) {\n                expect(event.sortBy).toEqual(\"id\");\n                expect(event.sortOrder).toEqual(\"asc\");\n                done();\n            });\n            datatable.ngDoCheck();\n            datatable.sortBy = \"id\";\n            datatable.ngOnChanges({\n                sortBy: new core_1.SimpleChange(null, datatable.sortBy)\n            });\n            datatable.ngDoCheck();\n            expect(datatable.sortOrder).toEqual(\"asc\");\n        });\n        it(\"should set sortOrder to 'asc' if provided something else than 'asc' or 'desc'\", function (done) {\n            datatable.onSortChange.subscribe(function (event) {\n                expect(event.sortBy).toEqual(\"id\");\n                expect(event.sortOrder).toEqual(\"asc\");\n                done();\n            });\n            datatable.ngDoCheck();\n            datatable.sortBy = \"id\";\n            datatable.sortOrder = \"bulb\";\n            datatable.ngOnChanges({\n                sortBy: new core_1.SimpleChange(null, datatable.sortBy),\n                sortOrder: new core_1.SimpleChange(null, datatable.sortOrder)\n            });\n            datatable.ngDoCheck();\n            expect(datatable.sortOrder).toEqual(\"asc\");\n            expect(datatable.data).toEqual([\n                { id: 1, name: 'Duck' },\n                { id: 2, name: 'ącki' },\n                { id: 3, name: 'banana' },\n                { id: 4, name: 'Ananas' },\n                { id: 5, name: 'Ðrone' }\n            ]);\n        });\n        it(\"shouldn't change order when only order provided\", function (done) {\n            done();\n            datatable.onSortChange.subscribe(function () {\n                done.fail(\"OnSortChange shouldn't been fired\");\n            });\n            datatable.ngDoCheck();\n            datatable.sortOrder = \"desc\";\n            datatable.ngOnChanges({ sortOrder: new core_1.SimpleChange(null, datatable.sortOrder) });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(datatable.inputData);\n        });\n        it(\"should call output event when sorting changed\", function (done) {\n            datatable.ngDoCheck();\n            datatable.sortByChange.switchMap(function (sortBy) {\n                expect(sortBy).toEqual(\"id\");\n                return datatable.sortOrderChange;\n            }).subscribe(function (sortOrder) {\n                expect(sortOrder).toEqual(\"desc\");\n                done();\n            });\n            datatable.setSort(\"id\", \"desc\");\n        });\n        it(\"shouldn't call output event when sortOrder fixed\", function (done) {\n            datatable.ngDoCheck();\n            datatable.sortOrderChange.subscribe(function () {\n                done.fail(\"Shouldn't call sortOrderChange\");\n            });\n            done();\n            datatable.sortOrder = \"bulb\";\n            datatable.ngOnChanges({ sortOrder: new core_1.SimpleChange(null, datatable.sortOrder) });\n            datatable.ngDoCheck();\n        });\n        it(\"shouldn't refresh data when set page with same settings\", function () {\n            datatable.setSort(\"name\", \"asc\");\n            datatable.ngDoCheck();\n            var data = datatable.data;\n            datatable.setSort(\"name\", \"asc\");\n            datatable.ngDoCheck();\n            expect(datatable.data).toBe(data);\n        });\n        it(\"should sort data ascending by name\", function () {\n            datatable.setSort(\"name\", \"asc\");\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([\n                { id: 4, name: 'Ananas' },\n                { id: 3, name: 'banana' },\n                { id: 1, name: 'Duck' },\n                { id: 5, name: 'Ðrone' },\n                { id: 2, name: 'ącki' }\n            ]);\n        });\n        it(\"should sort data descending by id\", function () {\n            datatable.setSort(\"id\", \"desc\");\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([\n                { id: 5, name: 'Ðrone' },\n                { id: 4, name: 'Ananas' },\n                { id: 3, name: 'banana' },\n                { id: 2, name: 'ącki' },\n                { id: 1, name: 'Duck' }\n            ]);\n        });\n        it(\"should sort data by two values\", function () {\n            var newData = [\n                { name: 'Claire', age: 9 },\n                { name: 'Anna', age: 34 },\n                { name: 'Claire', age: 16 },\n                { name: 'Claire', age: 7 },\n                { name: 'Anna', age: 12 }\n            ];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.setSort(['name', 'age'], \"asc\");\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([\n                { name: 'Anna', age: 12 },\n                { name: 'Anna', age: 34 },\n                { name: 'Claire', age: 7 },\n                { name: 'Claire', age: 9 },\n                { name: 'Claire', age: 16 }\n            ]);\n        });\n        it(\"should sort data by child property value\", function () {\n            var newData = [\n                { name: 'Claire', city: { zip: '51111' } },\n                { name: 'Anna' },\n                { name: 'Claire', city: { zip: '41111' } },\n                { name: 'Donald', city: 2 },\n                { name: 'Claire', city: { zip: '11111' } },\n                { name: 'Anna', city: { zip: '21111' } }\n            ];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.setSort(\"city.zip\", \"asc\");\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([\n                { name: 'Claire', city: { zip: '11111' } },\n                { name: 'Anna', city: { zip: '21111' } },\n                { name: 'Claire', city: { zip: '41111' } },\n                { name: 'Claire', city: { zip: '51111' } },\n                { name: 'Anna' },\n                { name: 'Donald', city: 2 },\n            ]);\n        });\n    });\n    describe(\"data change\", function () {\n        it(\"should refresh data when inputData change\", function () {\n            var newData = [{ id: 5, name: 'Ðrone' }, { id: 4, name: 'Ananas' }];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 5, name: 'Ðrone' }, { id: 4, name: 'Ananas' }]);\n        });\n        it(\"should refresh data when rows removed from inputData\", function () {\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(datatable.inputData);\n            datatable.inputData.pop();\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(datatable.inputData);\n        });\n        it(\"should refresh data when rows added to inputData\", function () {\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(datatable.inputData);\n            datatable.inputData.push({ id: 6, name: 'Furby' });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(datatable.inputData);\n        });\n        it(\"should fire onPageChange event after inputData change\", function (done) {\n            datatable.setPage(2, 2);\n            datatable.ngDoCheck();\n            datatable.onPageChange.subscribe(function (opt) {\n                expect(opt.activePage).toEqual(1);\n                expect(opt.dataLength).toEqual(2);\n                expect(opt.rowsOnPage).toEqual(2);\n                done();\n            });\n            var newData = [{ id: 5, name: 'Ðrone' }, { id: 4, name: 'Ananas' }];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.ngDoCheck();\n        });\n        it(\"should fire onPageChange event after rows added\", function (done) {\n            datatable.setPage(2, 2);\n            datatable.ngDoCheck();\n            datatable.onPageChange.subscribe(function (opt) {\n                expect(opt.activePage).toEqual(2);\n                expect(opt.dataLength).toEqual(6);\n                expect(opt.rowsOnPage).toEqual(2);\n                done();\n            });\n            datatable.inputData.push({ id: 6, name: 'Furby' });\n            datatable.ngDoCheck();\n        });\n        it(\"should fire onPageChange event after rows removed\", function (done) {\n            datatable.setPage(2, 2);\n            datatable.ngDoCheck();\n            datatable.onPageChange.subscribe(function (opt) {\n                expect(opt.activePage).toEqual(1);\n                expect(opt.dataLength).toEqual(2);\n                expect(opt.rowsOnPage).toEqual(2);\n                done();\n            });\n            _.times(3, function () { return datatable.inputData.pop(); });\n            datatable.ngDoCheck();\n        });\n        it(\"should change page when no data on current page after changed inputData\", function () {\n            datatable.setPage(2, 2);\n            datatable.ngDoCheck();\n            var newData = [{ id: 5, name: 'Ðrone' }, { id: 4, name: 'Ananas' }];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual(newData);\n        });\n        it(\"should change page when no data on current page after rows removed\", function () {\n            datatable.setPage(2, 2);\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 2, name: 'ącki' }, { id: 5, name: 'Ðrone' }]);\n            datatable.inputData.pop();\n            datatable.inputData.pop();\n            datatable.inputData.pop();\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 3, name: 'banana' }, { id: 1, name: 'Duck' }]);\n        });\n        it(\"shouldn't change page when can display data after data changed\", function () {\n            datatable.setPage(2, 1);\n            datatable.ngDoCheck();\n            var newData = [{ id: 5, name: 'Ðrone' }, { id: 1, name: 'Duck' }, { id: 4, name: 'Ananas' }];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 1, name: 'Duck' }]);\n        });\n        it(\"shouldn't change page when can display data after rows removed\", function () {\n            datatable.setPage(2, 1);\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 1, name: 'Duck' }]);\n            datatable.inputData.pop();\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 1, name: 'Duck' }]);\n        });\n        it(\"shouldn't change page when can display data after rows added\", function () {\n            datatable.setPage(2, 1);\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 1, name: 'Duck' }]);\n            datatable.inputData.push({ id: 6, name: 'Furby' });\n            datatable.ngDoCheck();\n            expect(datatable.data).toEqual([{ id: 1, name: 'Duck' }]);\n        });\n        it(\"shouldn't change page to 0 when data is empty\", function () {\n            datatable.setPage(2, 1);\n            datatable.ngDoCheck();\n            var newData = [];\n            datatable.ngOnChanges({ inputData: new core_1.SimpleChange(datatable.inputData, newData) });\n            datatable.ngDoCheck();\n            expect(datatable.activePage).toEqual(1);\n        });\n        it(\"shouldn't change page to 0 when data is empty after removed rows\", function () {\n            datatable.setPage(2, 1);\n            datatable.ngDoCheck();\n            _.times(5, function () { return datatable.inputData.pop(); });\n            datatable.ngDoCheck();\n            expect(datatable.inputData.length).toEqual(0);\n            expect(datatable.activePage).toEqual(1);\n        });\n    });\n});\n//# sourceMappingURL=DataTable.spec.js.map","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/lib/DataTableModule.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\nvar DataTable_1 = require(\"./DataTable\");\nvar DefaultSorter_1 = require(\"./DefaultSorter\");\nvar Paginator_1 = require(\"./Paginator\");\nvar BootstrapPaginator_1 = require(\"./BootstrapPaginator\");\nvar DataTableModule = (function () {\n    function DataTableModule() {\n    }\n    return DataTableModule;\n}());\nDataTableModule = __decorate([\n    core_1.NgModule({\n        imports: [\n            common_1.CommonModule\n        ],\n        declarations: [\n            DataTable_1.DataTable,\n            DefaultSorter_1.DefaultSorter,\n            Paginator_1.Paginator,\n            BootstrapPaginator_1.BootstrapPaginator\n        ],\n        exports: [\n            DataTable_1.DataTable,\n            DefaultSorter_1.DefaultSorter,\n            Paginator_1.Paginator,\n            BootstrapPaginator_1.BootstrapPaginator\n        ]\n    })\n], DataTableModule);\nexports.DataTableModule = DataTableModule;\n//# sourceMappingURL=DataTableModule.js.map","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/lib/DefaultSorter.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require(\"@angular/core\");\nvar DataTable_1 = require(\"./DataTable\");\nvar DefaultSorter = (function () {\n    function DefaultSorter(mfTable) {\n        this.mfTable = mfTable;\n        this.isSortedByMeAsc = false;\n        this.isSortedByMeDesc = false;\n    }\n    DefaultSorter.prototype.ngOnInit = function () {\n        var _this = this;\n        this.mfTable.onSortChange.subscribe(function (event) {\n            _this.isSortedByMeAsc = (event.sortBy == _this.sortBy && event.sortOrder == \"asc\");\n            _this.isSortedByMeDesc = (event.sortBy == _this.sortBy && event.sortOrder == \"desc\");\n        });\n    };\n    DefaultSorter.prototype.sort = function () {\n        if (this.isSortedByMeAsc) {\n            this.mfTable.setSort(this.sortBy, \"desc\");\n        }\n        else {\n            this.mfTable.setSort(this.sortBy, \"asc\");\n        }\n    };\n    return DefaultSorter;\n}());\n__decorate([\n    core_1.Input(\"by\"),\n    __metadata(\"design:type\", String)\n], DefaultSorter.prototype, \"sortBy\", void 0);\nDefaultSorter = __decorate([\n    core_1.Component({\n        selector: \"mfDefaultSorter\",\n        template: \"\\n        <a style=\\\"cursor: pointer\\\" (click)=\\\"sort()\\\" class=\\\"text-nowrap\\\">\\n            <ng-content></ng-content>\\n            <span *ngIf=\\\"isSortedByMeAsc\\\" class=\\\"glyphicon glyphicon-triangle-top\\\" aria-hidden=\\\"true\\\"></span>\\n            <span *ngIf=\\\"isSortedByMeDesc\\\" class=\\\"glyphicon glyphicon-triangle-bottom\\\" aria-hidden=\\\"true\\\"></span>\\n        </a>\"\n    }),\n    __metadata(\"design:paramtypes\", [DataTable_1.DataTable])\n], DefaultSorter);\nexports.DefaultSorter = DefaultSorter;\n//# sourceMappingURL=DefaultSorter.js.map","/home/travis/build/npmtest/node-npmtest-angular2-datatable/node_modules/angular2-datatable/lib/Paginator.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar core_1 = require(\"@angular/core\");\nvar DataTable_1 = require(\"./DataTable\");\nvar Paginator = (function () {\n    function Paginator(injectMfTable) {\n        var _this = this;\n        this.injectMfTable = injectMfTable;\n        this.dataLength = 0;\n        this.onPageChangeSubscriber = function (event) {\n            _this.activePage = event.activePage;\n            _this.rowsOnPage = event.rowsOnPage;\n            _this.dataLength = event.dataLength;\n            _this.lastPage = Math.ceil(_this.dataLength / _this.rowsOnPage);\n        };\n    }\n    Paginator.prototype.ngOnChanges = function (changes) {\n        this.mfTable = this.inputMfTable || this.injectMfTable;\n        this.onPageChangeSubscriber(this.mfTable.getPage());\n        this.mfTable.onPageChange.subscribe(this.onPageChangeSubscriber);\n    };\n    Paginator.prototype.setPage = function (pageNumber) {\n        this.mfTable.setPage(pageNumber, this.rowsOnPage);\n    };\n    Paginator.prototype.setRowsOnPage = function (rowsOnPage) {\n        this.mfTable.setPage(this.activePage, rowsOnPage);\n    };\n    return Paginator;\n}());\n__decorate([\n    core_1.Input(\"mfTable\"),\n    __metadata(\"design:type\", DataTable_1.DataTable)\n], Paginator.prototype, \"inputMfTable\", void 0);\nPaginator = __decorate([\n    core_1.Component({\n        selector: \"mfPaginator\",\n        template: \"<ng-content></ng-content>\"\n    }),\n    __param(0, core_1.Optional()),\n    __metadata(\"design:paramtypes\", [DataTable_1.DataTable])\n], Paginator);\nexports.Paginator = Paginator;\n//# sourceMappingURL=Paginator.js.map"}